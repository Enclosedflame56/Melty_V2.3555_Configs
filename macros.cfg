[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:

    STATUS_READY
    # Parameters
    {% set bedtemp = params.BED|int %}
    {% set hotendtemp = params.HOTEND|int %}

    CLEAR_PAUSE

    M140 S{bedtemp}
    BED_MESH_CLEAR
    
    # Set nozzle to reach temperature
    STATUS_HEATING
    M117 NOZZLE HEAT
    M104 S{hotendtemp}

#################################################################################################
##############################   CHECK FOR SUPERSLICER TOOLS  !##################################
#################################################################################################
     MMU_CALC_PURGE_VOLUMES SOURCE=gatemap MULTIPLIER=0.7 MAX=205

    {% set REFERENCED_TOOLS = params.REFERENCED_TOOLS|default("")|string %}
    {% set INITIAL_TOOL = params.INITIAL_TOOL|default(0)|int %}

    {% if REFERENCED_TOOLS == "!referenced_tools!" %}
        RESPOND MSG="Happy Hare gcode pre-processor is diabled"
        {% set REFERENCED_TOOLS = INITIAL_TOOL %}
    {% elif REFERENCED_TOOLS == "" %}
        RESPOND MSG="Happy Hare single color print"
        {% set REFERENCED_TOOLS = INITIAL_TOOL %}
    {% endif %}
    MMU_CHECK_GATE TOOLS={REFERENCED_TOOLS}
    #MMU_CHANGE_TOOL STANDALONE=1 TOOL={INITIAL_TOOL}    # Optional: load initial tool

#################################################################################################
##############################   CHECK FOR SUPERSLICER COLORS  !#################################
#################################################################################################

    {% set COLORS = params.COLORS|default("")|string %}
    {% set colors = COLORS.split(",") %}
    {% set ttg_map = printer.mmu.ttg_map %}

    {% for color in colors %}
        {% set tool = loop.index0 %}
        {% set gate = ttg_map[tool] %}                  # Make sure map to correct gate in case of TTG map
        MMU_GATE_MAP GATE={gate} COLOR={color}          # Register the filament color against correct gate in gate map
    {% endfor %}

#################################################################################################
#################################################################################################
#################################################################################################


    STATUS_HOMING
    M117 HOMING
    G28                            ;Home all axis    

    STATUS_LEVELING
    # Wait for bed to reach temperature
    M117 BED HEATING
    M190 S{bedtemp}

    ATTACH_PROBE_LOCK
    M117 QGL
    G32                             ; Quad Gantry Level

    G0 X100 Y150 F6000            ; Move Endswitch away from knocking off the dock.

    Clean_nozzle             ; Clean Nozzle and Scrub
   

    STATUS_CALIBRATING_Z
    M117 Calibrating Z
    CALIBRATE_Z
    
    STATUS_MESHING
   
    M117 BED MESHING
    BED_MESH_CALIBRATE ADAPTIVE=1             ; Measure Bed Offset
    Dock_Probe_Unlock
    M117                           ; Clear LCD Message
    G92 E0
    STATUS_PRINTING
    #SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1

  

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    

    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 5, th.axis_maximum.z]|min %}
    {% set unload = params.UNLOAD_AT_END|default(0)|int %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    M400                                     ; wait for buffer to clear
    G92 E0                                   ; zero the extruder
    G1 E-5.0 F1800                           ; retract filament
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
     
    G91
    G1 Z2 F3000
    G90                                      ;Absolute Positioning
    G0 X{th.axis_maximum.x//2 - 70} Y{th.axis_maximum.y - 10} F3600  ; park nozzle at rear
    # {% if unload|int == 1%}
    #  ERCF_EJECT
    # {% endif %}

    TURN_OFF_HEATERS                         ;Turn off Extruder and Bed Heat 
    M107                                     ; turn off fan

    STATUS_READY                            ;SB LED Command

    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[pause_resume]

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(25)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    M117 FEED ME MY NEXT COLOR
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
	{% set bound = params.BOUND|default(20)|int %}
	# Size for small pattern box
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	# Large pattern
		# Max positions, inset by BOUND
		{% set x_min = printer.toolhead.axis_minimum.x + bound %}
		{% set x_max = printer.toolhead.axis_maximum.x - bound %}
		{% set y_min = printer.toolhead.axis_minimum.y + bound %}
		{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	# Small pattern at center
		# Find X/Y center point
		{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
		{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
		
		# Set small pattern box around center point
		{% set x_center_min = x_center - (smallpatternsize/2) %}
		{% set x_center_max = x_center + (smallpatternsize/2) %}
		{% set y_center_min = y_center - (smallpatternsize/2) %}
		{% set y_center_max = y_center + (smallpatternsize/2) %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Output parameters to g-code terminal
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G90
		G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

	{% for i in range(iterations) %}
		# Large pattern
			# Diagonals
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			
			# Box
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
		
		# Small pattern
			# Small diagonals 
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			
			# Small box
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home and get position again for comparison:
		G28
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G90
		G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED


######################### CUSTOM MACROS###################################################
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
                                
       ; SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor       
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        #M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        ;SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                          ; enable filament sensor
        #RESETRGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
            G1 Z{zhop * -1} E{1.0} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}                             
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    #SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

# Park front center
[gcode_macro PARKFRONT]
gcode:
    CG28                             ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/4} F24000        
    RESTORE_GCODE_STATE NAME=PARKFRONT

# Park front center, but low down.
[gcode_macro PARKFRONTLOW]
gcode:
    CG28                            ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                              ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+25} Z20 F20000                                     
    RESTORE_GCODE_STATE NAME=PARKFRONT

# Park top rear left
[gcode_macro PARKREAR]
gcode:
    #CG28                            ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKREAR
    G90                              ; absolute positioning
    G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-200} F20000     
    RESTORE_GCODE_STATE NAME=PARKREAR

# Park at center of build volume
[gcode_macro PARKCENTER]
gcode:
    #CG28                             ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/4} F24000    
    RESTORE_GCODE_STATE NAME=PARKCENTER

# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
    #CG28                              ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKBED
    G90                                ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/4} Z15 F24000                                     
    RESTORE_GCODE_STATE NAME=PARKBED


[gcode_macro OFF]
gcode:
    M84                                  ; turn steppers off
    TURN_OFF_HEATERS                     ; turn bed / hotend off
    M107                                 ; turn print cooling fan off
    SET_FAN_SPEED FAN=Exhaust SPEED=0   ; turn exhaust fan off
    SET_FAN_SPEED FAN=BedFans SPEED=0   ; bed fan off
    SET_PIN PIN=caselight VALUE=0       ; turn case light off

[gcode_macro SHUTDOWN]
gcode:
    #LCDRGB R=0 G=0 B=0                               ; Turn off LCD neopixels (see above for this macro)
    #OFF                                              ; Shortcut to turn everything off (see above for this macro)
    {action_respond_info('action:poweroff')}          ; OctoPrint compatible host shutdown
	{action_call_remote_method("shutdown_machine")}   ; Moonraker compatible host shutdown

[menu __main __setup __shutdown]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Shut down
gcode: SHUTDOWN

[gcode_macro WARMUP]
gcode:
  {% set bed_temp = params.TEMPERATURE|default(110)|float %}
  M140 S{bed_temp}
  #SET_HEATER_TEMPERATURE HEATER=extruder TARGET=245


# [gcode_macro LOAD_FILAMENT]
# #DESCRIPTION: Loads the filament.
# variable_load_distance:  150
# variable_purge_distance:  25
# gcode:
#     {% set speed = params.SPEED|default(300) %}
#     {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(255)|float %} #Heat hotend to 255°C to load.
#     {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 30 %}
#     SAVE_GCODE_STATE NAME=load_state
#     M117 Heating...
#     RESPOND MSG="Heating..."
#     M109 S{EXTRUDER_TEMP}
#     G91
#     M117 Loading Filament
#     G92 E0
#     G1 E{load_distance} F{max_velocity} # fast-load
#     G1 E{purge_distance} F{speed} # purge
#     G1 E-3 F300 #Retract 3mm just to keep it from oozing.
#     G91 #RESET
#     M117 Filament Loaded!
#     RESPOND MSG="Filament Loaded!"
#     RESTORE_GCODE_STATE NAME=load_state


# [gcode_macro UNLOAD_FILAMENT]
# #DESCRIPTION: Unloads the filament.
# variable_unload_distance:  300
# variable_purge_distance:  5
# gcode:
#     {% set speed = params.SPEED|default(300) %}
#     {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(255)|float %} #Heat hotend to 255°C to load.
#     {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 20 %}
#     SAVE_GCODE_STATE NAME=unload_state
#     G91
#     M117 Heating...
#     RESPOND MSG="Heating..."
#     M109 S{EXTRUDER_TEMP}
#     M117 Unloading Filament
#     G92 E0
#     G1 E{purge_distance} F{speed} # purge
#     G1 E-{unload_distance} F{max_velocity} # fast-unload
#     G91 #RESET
#     M117 Filament Unloaded!
#     RESPOND MSG="Filament Unloaded!"
#     RESTORE_GCODE_STATE NAME=unload_state
